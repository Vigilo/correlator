diff -ur a/ampoule/main.py b/ampoule/main.py
--- a/ampoule/main.py	2010-01-10 10:57:42.000000000 +0100
+++ b/ampoule/main.py	2010-03-08 13:42:29.000000000 +0100
@@ -1,6 +1,5 @@
 import os
 import sys
-import imp
 import sets
 import itertools
 
@@ -269,14 +268,37 @@
                  path=None, uid=None, gid=None, usePTY=0,
                  packages=()):
     env = env.copy()
-
-    pythonpath = []
+    # Copy the original sys.path so that the children start
+    # with the same environment as their parent.
+    pythonpath = sys.path
+
+    # Add the packages' paths to the list that will be passed
+    # as the children's PYTHONPATH.
+    lib_path = os.path.join(sys.prefix, 'lib')
     for pkg in packages:
-        p = os.path.split(imp.find_module(pkg)[1])[0]
-        if p.startswith(os.path.join(sys.prefix, 'lib')):
-            continue
-        pythonpath.append(p)
-    pythonpath = list(sets.Set(pythonpath))
+        # Takes care of submodules (eg. "zope.interface").
+        # This is needed as loading only the main module
+        # may fail when dealing with namespaces.
+        fromlist = []
+        if '.' in pkg:
+            fromlist.append('.'.join(pkg.split('.')[:-1]))
+        mod = __import__(pkg, globals(), locals(), fromlist)
+
+        # If this is a namespace, add its __path__ to the pythonpath.
+        if hasattr(mod, '__path__'):
+            for pa in mod.__path__:
+                if os.path.commonprefix([pa, lib_path]) == lib_path:
+                    continue
+                p = os.sep.join(pa.split(os.sep)[:-(pkg.count('.') + 1)])
+                pythonpath.append(p)
+        # Otherwise, it's a regular module, add it's __file__'s path.
+        else:
+            pa = mod.__file__
+            if not (os.path.commonprefix([pa, lib_path]) == lib_path):
+                p = os.sep.join(pa.split(os.sep)[:-(pkg.count('.') + 1)])
+                pythonpath.append(p)
+
+    pythonpath = list(pythonpath)
     pythonpath.extend(env.get('PYTHONPATH', '').split(os.pathsep))
     env['PYTHONPATH'] = os.pathsep.join(pythonpath)
     args = (sys.executable, '-c', bootstrap) + args
