[include]
include = @SYSCONFDIR@/vigilo/correlator/conf.d/

[bus]
# Nom ou adresse IP du serveur AMQP à utiliser.
host = localhost

# Nom d'utilisateur à utiliser pour se connecter au bus.
user = correlator

# Mot de passe à utiliser
password = correlator

# Chiffrement du flux par SSL
use_ssl = False

# Nom de la file d'attente du connecteur
queue = correlator

# Liste des abonnements du connecteur, séparés par des virgules.
# Si la liste est vide, mettre uniquement une virgule.
subscriptions = event, computation-order

# Le trafic lié au bus doit-il être enregistré dans les logs ?
log_traffic = False


[database]
# URL d'accès à la base de données.
sqlalchemy_url = postgres://vigilo:vigilo@127.0.0.1/vigilo

# Préfixe des tables.
db_basename = vigilo_


[correlator]
# Délai d'expiration par défaut des contextes.
context_timeout = 60.

# Adresse IP du serveur memcached (optionnelle).
memcached_host = 127.0.0.1

# Port du serveur memcached.
memcached_port = 11211

# Activation du mode débogage de la connexion
# à memcached.
memcached_debug = False

# Validation des messages reçus.
validate_messages = False

# Nom de l'hôte symbolisant les services
# de haut niveau dans Nagios.
nagios_hls_host = High-Level-Services

# Durée maximale d'exécution pour chaque règle de corrélation.
# La valeur 0 désactive cette limite.
rules_timeout = 0

# Niveau de débogage pour l'envoi des événements
# corrélés aux journaux système.
syslog_data_level = 20

# La priorité associée à une alerte sur un
# hôte/service technique qui n'impacte aucun
# service de haut niveau.
unknown_priority_value = 4

# Ordre de tri pour la priorité des événements.
# - Utiliser "asc" si la priorité est inversement proportionnelle à sa
#   valeur (ie: plus le nombre est bas, plus la priorité est élevée).
# - Utiliser "desc" si la priorité est proportionnelle à sa valeur
#   (ie: plus le nombre est élevé, plus la priorité est élevée).
# NE PAS METTRE DE GUILLEMETS/APOSTROPHES AUTOUR DE LA VALEUR.
priority_order = asc

# Nombre minimum et maximum de processus dédiés
# à l'exécution des règles de corrélation.
min_rule_runners = 0
max_rule_runners = 4

# Durée en secondes d'inactivité après laquelle
# les rule runners s'arrêtent.
# Si ce délai est trop bas, cela nuira aux performances.
# Si ce délai est trop haut, le corrélateur occupera des
# ressources inutilement par moments.
rule_runners_max_idle = 20


[rules]
# Règles de corrélation actives.
svc_on_host_down = vigilo.correlator.rules.svc_on_host_down:SvcHostDown


[connector]
# Nom d'hôte utilisé pour signaler à Vigilo que ce connecteur fonctionne
# correctement. Cela doit correspondre au nom d'hôte configuré dans VigiConf
# pour cette machine. Par défaut, on utilise le nom d'hôte court (sans le
# domaine DNS)
#hostname = hostname

# L'exchange à utiliser pour les messages d'état du connecteur.
# Par défaut, la section [publications] est utilisée.
#status_exchange = connectors-status


[publications]
# Types de messages et le nom de l'exchange à utiliser pour leur publication.
# Par défaut, un exchange du même nom que le type est utilisé.
event = correlation


# -------
# Logging
#

[loggers]
keys = root,twisted,correlation

[handlers]
keys = console,syslog,correlation,errors

[formatters]
keys = consoleFormatter,syslogFormatter,correlationFormatter

[logger_root]
level = INFO
handlers = syslog,console,errors

[logger_twisted]
level = WARNING
qualname = twisted
propagate = 0
handlers = syslog,console,errors

[logger_correlation]
level = INFO
qualname = vigilo.correlator.syslog
propagate = 0
handlers = correlation,console

[logger_db_ops]
level = DEBUG
qualname = vigilo.correlator.db_insertion
handlers = syslog

[handler_console]
class = StreamHandler
level = NOTSET
formatter = consoleFormatter
args = (sys.stdout, )

[handler_syslog]
class = handlers.SysLogHandler
level = NOTSET
formatter = syslogFormatter
# Le premier argument correspond à l'emplacement du syslog.
# Il peut s'agir d'un fichier (ex : socket Unix, '/dev/log')
# ou d'une adresse IP avec un port, auquel cas il faut saisir
# le tout sous forme de tuple (args = ('127.0.0.1', 514), 'daemon').
#
# Le 2ème argument correspond à la facility à utiliser lors
# de l'envoi à syslog (voir logger(1) pour la liste des noms
# des facilities).
args = '/dev/log', 'daemon'

[handler_errors]
level = ERROR
class = handlers.RotatingFileHandler
args = ('@LOCALSTATEDIR@/log/vigilo/correlator/error.log', 'a', 1024*1024*10, 5)
formatter = consoleFormatter

[handler_correlation]
class = handlers.SysLogHandler
level = NOTSET
formatter = correlationFormatter
# Le premier argument correspond à l'emplacement du syslog.
# Il peut s'agir d'un fichier (ex : socket Unix, '/dev/log')
# ou d'une adresse IP avec un port, auquel cas il faut saisir
# le tout sous forme de tuple (args = ('127.0.0.1', 514), 'daemon').
#
# Le 2ème argument correspond à la facility à utiliser lors
# de l'envoi à syslog (voir logger(1) pour la liste des noms
# des facilities).
args = '/dev/log', 'daemon'

[formatter_consoleFormatter]
format = [%(created)f] %(levelname)s::%(processName)s::%(name)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_syslogFormatter]
format = %(processName)s[%(process)d]: %(levelname)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_correlationFormatter]
format = %(processName)s: %(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter
