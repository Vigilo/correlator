[bus]
# Nom ou adresse IP du serveur XMPP à utiliser.
host = localhost

# Nom du service de publication pour les messages.
service = pubsub.localhost

# Nom d'utilisateur à utiliser pour se connecter au bus.
jid = correlator@localhost

# Mot de passe associé au JID donné.
password = correlator

# Priorité statique. Si cette valeur n'est pas renseignée, la priorité est
# automatiquement choisie en fonction du nombre de connecteurs utilisant le
# même compte sur le bus.
#priority = 1

# Indique s'il faut chiffrer la connexion (True) ou simplement compresser
# le flux (False).
require_tls = False

# Liste des noms des topics auxquels le corrélateur est abonné,
# séparés par des virgules.
# À minima, il doit être abonné aux événements bruts publiés par
# le connector-nagios.
subscriptions = /vigilo/event, /vigilo/computation_order

# Le trafic lié au bus XMPP doit-il être enregistré dans les logs ?
log_traffic = False

[database]
# URL d'accès à la base de données.
sqlalchemy_url = postgres://vigilo:vigilo@127.0.0.1/vigilo

# Préfixe des tables.
db_basename = vigilo_

[connector]
# Fichier de sauvegarde locale des messages
# en cas d'échec d'une transmission.
backup_file = @LOCALSTATEDIR@/lib/vigilo/correlator/correlator.sqlite

# Table de sauvegarde pour les messages
# provenant du bus XMPP.
backup_table_from_bus = frombus

# Table de sauvegarde pour les messages
# à destination du bus XMPP.
backup_table_to_bus = tobus

# Nom d'hôte utilisé pour signaler à Vigilo que ce connecteur fonctionne
# correctement. Cela doit correspondre au nom d'hôte configuré dans VigiConf
# pour cette machine. Par défaut, on utilise le nom d'hôte court (sans le
# domaine DNS)
#hostname = hostname

[correlator]
# Délai d'expiration par défaut des contextes.
context_timeout = 60.

# Adresse IP du serveur memcached (optionnelle).
memcached_host = 127.0.0.1

# Port du serveur memcached.
memcached_port = 11211

# Activation du mode débogage de la connexion
# à memcached.
memcached_debug = False

# Validation des messages reçus.
validate_messages = False

# Nom de l'hôte symbolisant les services
# de haut niveau dans Nagios.
nagios_hls_host = High-Level-Services

# Durée maximale d'exécution pour chaque règle de corrélation.
# La valeur 0 désactive cette limite.
rules_timeout = 0

# Niveau de débogage pour l'envoi des événements
# corrélés aux journaux système.
syslog_data_level = 20

# La priorité associée à une alerte sur un
# hôte/service technique qui n'impacte aucun
# service de haut niveau.
unknown_priority_value = 4

# Ordre de tri pour la priorité des événements.
# - Utiliser "asc" si la priorité est inversement proportionnelle à sa
#   valeur (ie: plus le nombre est bas, plus la priorité est élevée).
# - Utiliser "desc" si la priorité est proportionnelle à sa valeur
#   (ie: plus le nombre est élevé, plus la priorité est élevée).
# NE PAS METTRE DE GUILLEMETS/APOSTROPHES AUTOUR DE LA VALEUR.
priority_order = asc

# Nombre minimum et maximum de processus dédiés
# à l'exécution des règles de corrélation.
min_rule_runners = 0
max_rule_runners = 4

# Durée en secondes d'inactivité après laquelle
# les rule runners s'arrêtent.
# Si ce délai est trop bas, cela nuira aux performances.
# Si ce délai est trop haut, le corrélateur occupera des
# ressources inutilement par moments.
rule_runners_max_idle = 20

[rules]
# Règles de corrélation actives.
svc_on_host_down = vigilo.correlator.rules.svc_on_host_down:SvcHostDown
hls_deps = vigilo.correlator_enterprise.rules.hls_deps:HighLevelServiceDepsRule
lls_deps = vigilo.correlator_enterprise.rules.lls_deps:LowLevelServiceDepsRule
occ_count = vigilo.correlator_enterprise.rules.update_occurrences_count:UpdateOccurrencesCountRule
priority = vigilo.correlator_enterprise.rules.priority:PriorityRule

[publications]
# Indique le nœud cible du message en fonction du type.
event = /vigilo/correvent
aggr = /vigilo/aggr
delaggr = /vigilo/delaggr
state = /vigilo/state
command = /vigilo/command
perf = /vigilo/perf

[loggers]
keys = root,twisted,correlation

[handlers]
keys = console,syslog,correlation,errors

[formatters]
keys = consoleFormatter,syslogFormatter,correlationFormatter

[logger_root]
level = INFO
handlers = syslog,console

[logger_twisted]
level = WARNING
qualname = twisted
propagate = 0
handlers = syslog,console

[logger_correlation]
level = INFO
qualname = vigilo.correlator.syslog
propagate = 0
handlers = correlation,console

[handler_console]
class = StreamHandler
level = NOTSET
formatter = consoleFormatter
args = (sys.stdout, )

[handler_syslog]
class = handlers.SysLogHandler
level = NOTSET
formatter = syslogFormatter
# Le premier argument correspond à l'emplacement du syslog.
# Il peut s'agir d'un fichier (ex : socket Unix, '/dev/log')
# ou d'une adresse IP avec un port, auquel cas il faut saisir
# le tout sous forme de tuple (args = ('127.0.0.1', 514), 'daemon').
#
# Le 2ème argument correspond à la facility à utiliser lors
# de l'envoi à syslog (voir logger(1) pour la liste des noms
# des facilities).
args = '/dev/log', 'daemon'

[handler_errors]
level = ERROR
class = handlers.RotatingFileHandler
args = ('@LOCALSTATEDIR@/log/vigilo/correlator/error.log', 'a', 1024*1024*10, 5)
formatter = consoleFormatter

[handler_correlation]
class = handlers.SysLogHandler
level = NOTSET
formatter = correlationFormatter
# Le premier argument correspond à l'emplacement du syslog.
# Il peut s'agir d'un fichier (ex : socket Unix, '/dev/log')
# ou d'une adresse IP avec un port, auquel cas il faut saisir
# le tout sous forme de tuple (args = ('127.0.0.1', 514), 'daemon').
#
# Le 2ème argument correspond à la facility à utiliser lors
# de l'envoi à syslog (voir logger(1) pour la liste des noms
# des facilities).
args = '/dev/log', 'daemon'

[formatter_consoleFormatter]
format = [%(created)f] %(levelname)s::%(processName)s::%(name)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_syslogFormatter]
format = %(processName)s[%(process)d]: %(levelname)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_correlationFormatter]
format = %(processName)s: %(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter
